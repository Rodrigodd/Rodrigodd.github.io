{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe previous part is here({% post_url 2022-10-16-bf_compiler-part1 %}), where we made an optimized brainfuck interpreter.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThis is a lesser problem for brainfuck operations with bigger implementations, like the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q there, who has a very involved wrapping calculation (could be greatly improved by the memory length being a power of 2)^could_be_better, but the overhead is still very significant, almost 2x.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q^could_be_better: Actually, this can already be greatly improved by using conditional logic instead, as we will discover later when compiling this operation.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QPassing it through the Netwide Assembler, followed by objdump, we get the machine code:\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QI didn't do it here because the program will finish immediately after running the code, so the OS will already free it anyway^fn_pointer_safety.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q^fn_pointer_safety: But also because by leaking the memory, it will have a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q lifetime, and it is a necessary condition to have a safe function pointer.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QHere is the quick reference that I am using to check the register names^weird_name and types.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q^weird_name: The names of the registers in x64 are not very intuitive, due to backward compatibility.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QA Singlepass JIT Compiler\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn the System V ABI, the stack need to be aligned by 16 bytes wherever we do a call^align.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q^align: If you forget to do that, the called code can misbehave, and some instructions can crash trying to access unaligned memory.\\E$"}
{"rule":"HAVE_PART_AGREEMENT","sentence":"^\\QWhen implementing the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q instruction, I notice that x86 does not have add immediate for 64-bit values, so I downgrade all \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qs used in instructions to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QCranelift is a code generator written in Rust, and used by projects such as Wasmtime and rustc_codegen_cranelift.\\E$"}
{"rule":"IN_A_X_MANNER","sentence":"^\\QAnd on \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we pop the labels from the stack, and use them in a similar way:\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe current interpreter has run mandelbrot.bf in 91.6 seconds and factor.bf in 27.18 seconds^bench.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q^bench: You can find all measures in detail, including method and environment, in this document.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q^elis_bench: The implementation in the original blog post have taken, respectively, 64 seconds and 24 seconds on my machine.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QSo our \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q enum becomes^instruction_size:\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q^instruction_size: Note that here I am using a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for the index of the pairing bracket, which have 8 bytes on a 64-bit system.\\E$"}
{"rule":"WHITESPACE_RULE","sentence":"^\\Qmandelbrot.bf factor.bf\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q+ 694 422\n- 591 370\n> 4,428 1,324\n< 4,363 1,294\n[ 686 231\n] 686 231\n.\\E$"}
{"rule":"WHITESPACE_RULE","sentence":"^\\Qmandelbrot.bf factor.bf mandelbrot.bf factor.bf\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q+ 179,053,599 212,428,900 351,460,869 396,481,127\n\\- 177,623,022 212,328,376 0 0\n\\> 4,453,036,023 1,220,387,724 1,408,648,727 484,719,480\n< 4,453,036,013 1,220,387,704 0 0\n\\[ 422,534,152 118,341,127 422,534,152 118,341,127\n\\] 835,818,921 242,695,606 835,818,921 242,695,606\n, 6,240 21 6,240 21\n, 0 10 0 10\n----- -------------- ------------- ------------- -------------\nTotal 10,521,107,970 3,226,569,468 3,018,468,909 1,242,237,371\\E$"}
{"rule":"WHITESPACE_RULE","sentence":"^\\Qcount loop\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn Rust, the code AST is first converted to a High-Level Intermediate Representation (process called HIR lowering), which is used for type inference, trait solving and type checking.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe can also go \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and remove bound checks with \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q^did_that.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q^did_that: In fact, I have done some of these changes here, but didn't carefully profile it.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q3 7\n, 0 1\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe current interpreter has run mandelbrot.bf in 96.1 seconds and factor.bf in 27.68 seconds^bench.\\E$"}
{"rule":"TYPO_FORM_FROM","sentence":"^\\QCranelift's IR, similar to many others code generators IR, uses static single-assignment form (SSA), which basically means that there is no mutable variables in this representation.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qthe first part: {% post_url 2022-10-16-bf_compiler-part1 %}\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QInstead of waiting for the compilation every time we need to run a program, we can instead compile it just one, ahead-of-time (AOT)^aot, and serialize it to disk.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q^aot: I used the term \"AOT\" here to have a contrast with \"JIT\", but it is a term more used in context where the language is expected to be JIT compiled.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe previous part is here({% post_url 2022-10-16-bf_compiler-part2 %}), where we made an x86 JIT compiler for brainfuck interpreter.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QTODO:\nTell that my measures also take in the compilation time.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q^seal: Sealing them as soon as possible allows the resolving of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qs to be faster.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QWe must also remember to seal our block as soon as all branches to it are defined^seal.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QTo solve this, we can instead make an AOT compiler^aot.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QPart 1: An Optimized Interpreter({% post_url 2022-10-16-bf_compiler-part1 %})\nPart 2: A Singlepass JIT Compiler({% post_url 2022-10-16-bf_compiler-part2 %})\nPart 3: A Cranelift JIT Compiler\nPart 4: A Static Compiler (WIP)\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn the previous part({% post_url 2022-10-16-bf_compiler-part2 %}) we made an x86 JIT compiler for brainfuck interpreter.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QPart 1: An Optimized Interpreter({% post_url 2022-10-16-bf_compiler-part1 %})\nPart 2: A Singlepass JIT Compiler\nPart 3: A Cranelift JIT Compiler({% post_url 2022-11-21-bf_compiler-part3 %})\nPart 4: A Static Compiler (WIP)\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn the previous part({% post_url 2022-10-16-bf_compiler-part1 %}) we made an optimized brainfuck interpreter.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QPart 1: An Optimized Interpreter\nPart 2: A Singlepass JIT Compiler({% post_url 2022-10-16-bf_compiler-part2 %})\nPart 3: A Cranelift JIT Compiler({% post_url 2022-11-21-bf_compiler-part3 %})\nPart 4: A Static Compiler (WIP)\\E$"}
